# 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
druid.initialSize=8
# 最小连接池数量
druid.minIdle=8
# 最大连接池数量
druid.maxActive=20
# 获取连接时最大等待时间，单位毫秒。
# 配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，
# 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
druid.maxWait=60000
# 是否缓存preparedStatement，也就是PSCache。
# PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
druid.poolPreparedStatements=false
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
# 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
druid.maxPoolPreparedStatementPerConnectionSize=-1
# 有两个含义：
# 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
# 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
druid.timeBetweenEvictionRunsMillis=60000
# 连接保持空闲而不被驱逐的最小时间
druid.minEvictableIdleTimeMillis=300000
# 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
# 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
druid.validationQuery=SELECT 1 FROM DUAL
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
druid.testOnBorrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
druid.testOnReturn=false
# 建议配置为true，不影响性能，并且保证安全性。
# 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
druid.testWhileIdle=true

druid.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
# 监控统计用的filter:stat
# 日志用的filter:log4j
# 防御sql注入的filter:wall
druid.filters=stat,wall,slf4j
# 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
druid.keepAlive=true